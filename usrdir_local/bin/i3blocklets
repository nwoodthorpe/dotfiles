#!/usr/bin/env python3

import os
import psutil
import re
import subprocess
import sys
import time


# MPD config
MPD_HOST = "XHv1OqE6Yy1oZbF5@127.0.0.1"
MPD_PORT = "2856"
MPD_FORMAT = "%title% - %artist%"

# HDDTEMP config
HDDTEMP_HOST = "127.0.0.1"
HDDTEMP_PORT = "7634"

# Net config
NETWORK_VPN_DIR = "/proc/sys/net/ipv4/conf/tun0"

# Sensor config
CPU_SENSOR = '/sys/devices/platform/asus-nb-wmi/hwmon/hwmon1/temp1_input'

# Sysinfo config
OS_NAME = "Arch Linux"

# Clock config
TIME_FORMAT = "%y:%m:%d %H:%M"


def cpu_percent(show_emblem=True):
    emblem = '\u25A3'
    label = psutil.cpu_percent(0.5)
    label_color = '#D19A66'
    emblem_color = label_color

    if show_emblem:
        return '<span color="{2}">{0}</span> <span color="{3}">{1}</span>'\
            .format(emblem, label.upper(), emblem_color, label_color)

    return '<span color="{1}">{0}</span>'.format(label.upper(), label_color)


def cpu_avg(show_emblem=True):
    emblem = '\u25A3'
    label_color = '#D19A66'
    emblem_color = label_color

    loadavg = os.getloadavg()
    cores = psutil.cpu_count()
    label = '{0:.1f}%'.format(loadavg[0] / cores * 100)

    if show_emblem:
        return '<span color="{2}">{0}</span> <span color="{3}">{1}</span>'\
            .format(emblem, label.upper(), emblem_color, label_color)

    return '<span color="{1}">{0}</span>'.format(label, label_color)


def volume(show_emblem=True):
    label_color = '#56B6C2'
    emblem_color = label_color

    emblem_speaker_muted = '\U0001F507'
    emblem_speaker_low = '\U0001F508'
    emblem_speaker_medium = '\U0001F509'
    emblem_speaker_high = '\U0001F50A'
    emblem_music_playing = '\U0000266B'

    amixer = subprocess.check_output(['amixer', 'get', 'Master'])

    if re.search("\[on\]", amixer.decode()):  # Volume is on
        re_vol = re.search('(?<=\[)\d+(?=%\])', amixer.decode())
        vol_percent = int(re_vol.group())

        try:
            mpd_playing = subprocess.check_output(
                ['mpc', 'current', '--host', MPD_HOST, '--port', MPD_PORT]
            )
        except (subprocess.CalledProcessError, FileNotFoundError):
            mpd_playing = None

        if mpd_playing:
            emblem = emblem_music_playing
        elif vol_percent > 60:
            emblem = emblem_speaker_high
        elif vol_percent > 30:
            emblem = emblem_speaker_medium
        else:
            emblem = emblem_speaker_low

        label = "{}%".format(vol_percent)
    else:  # Volume is off
        emblem = emblem_speaker_muted
        label = 'N.A'

    if show_emblem:
        return '<span color="{2}">{0}</span> <span color="{3}">{1}</span>'\
            .format(emblem, label.upper(), emblem_color, label_color)

    return '<span color="{1}">{0}</span>'.format(label.upper(), label_color)


def memory(show_emblem=True):
    emblem = '\u25E8'
    label = 'N.A'
    label_color = '#98C379'
    emblem_color = label_color

    mem = psutil.virtual_memory().total - psutil.virtual_memory().available

    for s in ['B', 'K', 'M', 'G', 'T', 'P']:
        if mem < 1024:
            label = "{0:.1f}{1}".format(mem, s)
            break
        else:
            mem /= 1024

    if show_emblem:
        return '<span color="{2}">{0}</span> <span color="{3}">{1}</span>'\
            .format(emblem, label.upper(), emblem_color, label_color)

    return '<span color="{1}">{0}</span>'.format(label.upper(), label_color)


def swap(show_emblem=True):
    emblem = '\u25CD'
    label = 'N.A'
    label_color = '#98C379'
    emblem_color = label_color

    swp = psutil.swap_memory().used

    for s in ['B', 'K', 'M', 'G', 'T', 'P']:
        if swp < 1024:
            label = "{0:.1f}{1}".format(swp, s)
            break
        else:
            swp /= 1024

    if show_emblem:
        return '<span color="{2}">{0}</span> <span color="{3}">{1}</span>'\
            .format(emblem, label.upper(), emblem_color, label_color)

    return '<span color="{1}">{0}</span>'.format(label.upper(), label_color)


def network(show_emblem=True):
    emblem_antenna = '\U0001F4F6'
    emblem_ethernet = '\u2693'
    emblem_locked = '\U0001F512'
    label = "Not Available"
    label_color = '#C678FF'
    emblem_color = label_color

    try:
        network_device = subprocess.check_output(
            ['nmcli', '-t', '-f', 'device,type,state,connection', 'device']
        )
        network_re = re.search('.*:connected:.*', network_device.decode())

        nm_device, nm_type, nm_state, nm_connection = \
            network_re.group(0).strip().split(":")
        label = nm_connection
    except (subprocess.CalledProcessError, FileNotFoundError, AttributeError):
        nm_type = None
        pass

    if os.path.isdir(NETWORK_VPN_DIR):
        emblem = emblem_locked
    elif nm_type:
        if nm_type.strip() == "ethernet":
            emblem = emblem_ethernet
        elif nm_type.strip() == "wifi":
            emblem = emblem_antenna
        else:
            emblem = emblem_antenna
    else:
        emblem = emblem_antenna

    if show_emblem:
        return '<span color="{2}">{0}</span> <span color="{3}">{1}</span>'\
            .format(emblem, label.upper(), emblem_color, label_color)

    return '<span color="{1}">{0}</span>'.format(label.upper(), label_color)


def cpu_temp(show_emblem=True):
    emblem = '\U0001F375'
    label_color = '#E06C75'
    emblem_color = label_color

    try:
        sensor = open(CPU_SENSOR).read()
        label = "{:.0f}°C".format(int(sensor) / 1000)
    except (FileNotFoundError, FileExistsError):
        label = "N.A"

    if show_emblem:
        return '<span color="{2}">{0}</span> <span color="{3}">{1}</span>'\
            .format(emblem, label.upper(), emblem_color, label_color)

    return '<span color="{1}">{0}</span>'.format(label.upper(), label_color)


def gpu_temp(show_emblem=True):
    emblem = None
    label_color = '#E06C75'
    emblem_color = label_color

    try:
        sensor = subprocess.check_output(['nvidia-smi',
                                          '-q', '-d', 'temperature'])
        re_sensor = re.search('(?<=GPU Current Temp).*(\d+)(?= C)',
                              sensor.decode())
        label = re.search('\d+', re_sensor.group()).group() + "°C"
    except (subprocess.CalledProcessError, FileNotFoundError):
        label = 'N.A'

    if show_emblem:
        return '<span color="{2}">{0}</span> <span color="{3}">{1}</span>'\
            .format(emblem, label.upper(), emblem_color, label_color)

    return '<span color="{1}">{0}</span>'.format(label.upper(), label_color)


def hdd_temp(show_emblem=False):
    emblem = None
    label_color = "#E06C75"
    emblem_color = label_color

    try:
        sensor = subprocess.check_output(['telnet',
                                          HDDTEMP_HOST, HDDTEMP_PORT]).strip()
        re_sensor = re.search('(?<=\|)\d+(?=|C)', sensor.decode())
        label = re_sensor.group() + '°C'
    except (subprocess.CalledProcessError, FileNotFoundError):
        label = "N.A"

    if show_emblem:
        return '<span color="{2}">{0}</span> <span color="{3}">{1}</span>'\
            .format(emblem, label.upper(), emblem_color, label_color)

    return '<span color="{1}">{0}</span>'.format(label.upper(), label_color)


def battery(show_emblem=True):
    emblem_battery = '\U0001F50B'
    # emblem_charging = '\u26A1'
    emblem_electric_plug = '\U0001F50C'
    label_color = '#CA6498'
    emblem_color = label_color

    # Read acpi output
    acpi_status = subprocess.check_output(['acpi', '-b']).strip().decode()

    if acpi_status:  # Output available (using battery)
        # Get status: (unknown, charging, discharging, full)
        re_status = re.search('(?<=: )\w+(?=,)', acpi_status)
        status = re_status.group()
        # Get percent
        re_percent = re.search('(?<=, )\d+(?=%)', acpi_status)
        percent = "{}%".format(re_percent.group())

        if status == 'Unknown':  # Charged, Plugged in
            emblem = emblem_electric_plug
            label = "{}".format(percent)
        elif status == 'Full':  # Full
            emblem = emblem_electric_plug
            label = 'Full'
        else:  # Charging or discharging

            if status == "Charging":
                emblem = emblem_electric_plug
                label = "+{}".format(percent)
            else:
                emblem = emblem_battery
                label = "{}".format(percent)
    else:  # Not using battery
        emblem = emblem_electric_plug
        label = "A.C."

    if show_emblem:
        return '<span color="{2}">{0}</span> <span color="{3}">{1}</span>'\
            .format(emblem, label.upper(), emblem_color, label_color)

    return '<span color="{1}">{0}</span>'.format(label.upper(), label_color)


def clock(show_emblem=True):
    emblem = '\u25d5'
    label_color = '#74B1FF'
    emblem_color = label_color
    label = time.strftime(TIME_FORMAT)

    if show_emblem:
        return '<span color="{2}">{0}</span> <span color="{3}">{1}</span>'\
            .format(emblem, label.upper(), emblem_color, label_color)

    return '<span color="{1}">{0}</span>'.format(label.upper(), label_color)


def system_info(show_emblem=True):
    emblem = '\U0001F4BB'
    label = OS_NAME
    label_color = '#ABB2BF'
    emblem_color = label_color

    try:
        label = "{0} {1}".format(
            label, subprocess.check_output(['uname', '-r']).decode().strip()
        )
    except (subprocess.CalledProcessError, FileNotFoundError):
        pass

    if show_emblem:
        return '<span color="{2}">{0}</span> <span color="{3}">{1}</span>'\
            .format(emblem, label.upper(), emblem_color, label_color)

    return '<span color="{1}">{0}</span>'.format(label.upper(), label_color)


def separator():
    color = '#586e75'
    symbol = '/'
    return '<span color="{1}">{0}</span>'.format(symbol, color)


def mpd(show_emblem=True):
    emblem_default = "\U0000266B"
    emblem_playing = "\u25B6"
    emblem_paused = "\u23F8"

    label_color = "#56B6C2"
    emblem_color = label_color

    try:
        mpc_output = subprocess.check_output(['mpc', '--format', MPD_FORMAT,
                                              '--host', MPD_HOST,
                                              '--port', MPD_PORT])
        mpd_status = mpc_output.decode().strip().split("\n")

        if len(mpd_status) == 3:  # Playing or paused
            label = mpd_status[0]

            if "playing" in mpd_status[1]:
                emblem = emblem_playing
            elif "paused" in mpd_status[1]:
                emblem = emblem_paused
            else:  # Unexpected case
                emblem = emblem_default
        else:  # Stopped
            emblem = emblem_default
            label = "N.A"
    except (subprocess.CalledProcessError, FileNotFoundError):
        emblem = emblem_default
        label = "N.A"

    if show_emblem:
        return '<span color="{2}">{0}</span> <span color="{3}">{1}</span>'\
            .format(emblem, label.upper(), emblem_color, label_color)

    return '<span color="{1}">{0}</span>'.format(label.upper(), label_color)


def xkb_indicator(show_emblem=True):
    emblem = "\u2325"  # '\u2328'
    label = ""
    label_active_color = "#D19A66"
    label_inactive_color = "#828997"
    numlock_symbol = "[1]"  # " 1⃣  "
    capslock_symbol = "[A]"  # " A⃣  "
    emblem_color = label_active_color

    xkb_status = subprocess.check_output(['xset', 'q'])

    numlock_status = re.search('(Num Lock: +)(on|off)', xkb_status.decode())

    if numlock_status.group(2) == "on":
        numlock_color = label_active_color
    else:
        numlock_color = label_inactive_color

    label += '<span color="{1}">{0}</span>'.format(numlock_symbol,
                                                   numlock_color)

    capslock_status = re.search('(Caps Lock: +)(on|off)', xkb_status.decode())

    if capslock_status.group(2) == "on":
        capslock_color = label_active_color
    else:
        capslock_color = label_inactive_color

    label += '<span color="{1}">{0}</span>'.format(capslock_symbol,
                                                   capslock_color)

    if show_emblem:
        return '<span color="{2}">{0}</span> {1}'\
            .format(emblem, label, emblem_color)

    return label


def pacman(show_emblem=True):
    return "Not Available".upper()


def mem_swap():
    return "{0} {1}".format(memory(), swap(False))


def sensors():
    return "{0} {1}".format(cpu_temp(), gpu_temp(False))


if __name__ == '__main__':
    # Call function by (first) received argument
    print(locals()[sys.argv[1]]())
